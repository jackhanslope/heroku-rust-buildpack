#!/bin/sh

# Directories we might need
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Set rust version
VERSION=nightly

# to crash
set -eu

# Record our Rust build environment configuration in an export file
cat <<EOF > $BP_DIR/export
# Our rustup installation.
export RUSTUP_HOME="$CACHE_DIR/multirust"

# Our cargo installation.  We implicitly trust Rustup and Cargo
# to do the right thing when new versions are released.
export CARGO_HOME="$CACHE_DIR/cargo"

# Include binaries installed by cargo and rustup in our path.
PATH="\$CARGO_HOME/bin:\$PATH"
EOF

# Read our build environment back in and evaluate it so that we can use it.
. $BP_DIR/export

# Switch to our cache directory.
mkdir -p "$CACHE_DIR"
cd "$CACHE_DIR"

# Install rustup
echo "-----> Downloading rustup"
curl https://sh.rustup.rs -sSf > rustup.sh
chmod u+x rustup.sh
echo "-----> Using rustup to install Rust channel $VERSION"
./rustup.sh -y --default-toolchain "$VERSION"
rm rustup.sh
echo "-----> Installing wasm-pack"
curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

# Build backend
mkdir $BUILD_DIR/target
cd $BUILD_DIR/backend
cargo build --target-dir $BUILD_DIR/target

# build frontend
cd $BUILD_DIR
mkdir static static/wasm-pack
cd $BUILD_DIR/frontend
wasm-pack build --target web  --out-dir ../static/wasm-pack
cd $BUILD_DIR/static
rollup ./main.js --format iife --file ./wasm-pack/bundle.js
